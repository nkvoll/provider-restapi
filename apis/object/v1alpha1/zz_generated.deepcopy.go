//go:build !ignore_autogenerated

/*
Copyright 2023 Njal Karevoll.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Object) DeepCopyInto(out *Object) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Object.
func (in *Object) DeepCopy() *Object {
	if in == nil {
		return nil
	}
	out := new(Object)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Object) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectInitParameters) DeepCopyInto(out *ObjectInitParameters) {
	*out = *in
	if in.CreateMethod != nil {
		in, out := &in.CreateMethod, &out.CreateMethod
		*out = new(string)
		**out = **in
	}
	if in.CreatePath != nil {
		in, out := &in.CreatePath, &out.CreatePath
		*out = new(string)
		**out = **in
	}
	if in.CreateQueryString != nil {
		in, out := &in.CreateQueryString, &out.CreateQueryString
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Debug != nil {
		in, out := &in.Debug, &out.Debug
		*out = new(bool)
		**out = **in
	}
	if in.DeleteQueryString != nil {
		in, out := &in.DeleteQueryString, &out.DeleteQueryString
		*out = new(string)
		**out = **in
	}
	if in.DestroyData != nil {
		in, out := &in.DestroyData, &out.DestroyData
		*out = new(string)
		**out = **in
	}
	if in.DestroyMethod != nil {
		in, out := &in.DestroyMethod, &out.DestroyMethod
		*out = new(string)
		**out = **in
	}
	if in.DestroyPath != nil {
		in, out := &in.DestroyPath, &out.DestroyPath
		*out = new(string)
		**out = **in
	}
	if in.DriftFields != nil {
		in, out := &in.DriftFields, &out.DriftFields
		*out = new(string)
		**out = **in
	}
	if in.DriftFieldsFromData != nil {
		in, out := &in.DriftFieldsFromData, &out.DriftFieldsFromData
		*out = new(bool)
		**out = **in
	}
	if in.ForceNew != nil {
		in, out := &in.ForceNew, &out.ForceNew
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IDAttribute != nil {
		in, out := &in.IDAttribute, &out.IDAttribute
		*out = new(string)
		**out = **in
	}
	if in.IgnoreAllServerChanges != nil {
		in, out := &in.IgnoreAllServerChanges, &out.IgnoreAllServerChanges
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreChangesTo != nil {
		in, out := &in.IgnoreChangesTo, &out.IgnoreChangesTo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.QueryString != nil {
		in, out := &in.QueryString, &out.QueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadMethod != nil {
		in, out := &in.ReadMethod, &out.ReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReadPath != nil {
		in, out := &in.ReadPath, &out.ReadPath
		*out = new(string)
		**out = **in
	}
	if in.ReadQueryString != nil {
		in, out := &in.ReadQueryString, &out.ReadQueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadSearch != nil {
		in, out := &in.ReadSearch, &out.ReadSearch
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdateData != nil {
		in, out := &in.UpdateData, &out.UpdateData
		*out = new(string)
		**out = **in
	}
	if in.UpdateMethod != nil {
		in, out := &in.UpdateMethod, &out.UpdateMethod
		*out = new(string)
		**out = **in
	}
	if in.UpdatePath != nil {
		in, out := &in.UpdatePath, &out.UpdatePath
		*out = new(string)
		**out = **in
	}
	if in.UpdateQueryString != nil {
		in, out := &in.UpdateQueryString, &out.UpdateQueryString
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectInitParameters.
func (in *ObjectInitParameters) DeepCopy() *ObjectInitParameters {
	if in == nil {
		return nil
	}
	out := new(ObjectInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectList) DeepCopyInto(out *ObjectList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Object, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectList.
func (in *ObjectList) DeepCopy() *ObjectList {
	if in == nil {
		return nil
	}
	out := new(ObjectList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ObjectList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectObservation) DeepCopyInto(out *ObjectObservation) {
	*out = *in
	if in.CreateMethod != nil {
		in, out := &in.CreateMethod, &out.CreateMethod
		*out = new(string)
		**out = **in
	}
	if in.CreatePath != nil {
		in, out := &in.CreatePath, &out.CreatePath
		*out = new(string)
		**out = **in
	}
	if in.CreateQueryString != nil {
		in, out := &in.CreateQueryString, &out.CreateQueryString
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Debug != nil {
		in, out := &in.Debug, &out.Debug
		*out = new(bool)
		**out = **in
	}
	if in.DeleteQueryString != nil {
		in, out := &in.DeleteQueryString, &out.DeleteQueryString
		*out = new(string)
		**out = **in
	}
	if in.DestroyData != nil {
		in, out := &in.DestroyData, &out.DestroyData
		*out = new(string)
		**out = **in
	}
	if in.DestroyMethod != nil {
		in, out := &in.DestroyMethod, &out.DestroyMethod
		*out = new(string)
		**out = **in
	}
	if in.DestroyPath != nil {
		in, out := &in.DestroyPath, &out.DestroyPath
		*out = new(string)
		**out = **in
	}
	if in.DriftFields != nil {
		in, out := &in.DriftFields, &out.DriftFields
		*out = new(string)
		**out = **in
	}
	if in.DriftFieldsFromData != nil {
		in, out := &in.DriftFieldsFromData, &out.DriftFieldsFromData
		*out = new(bool)
		**out = **in
	}
	if in.ForceNew != nil {
		in, out := &in.ForceNew, &out.ForceNew
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IDAttribute != nil {
		in, out := &in.IDAttribute, &out.IDAttribute
		*out = new(string)
		**out = **in
	}
	if in.IgnoreAllServerChanges != nil {
		in, out := &in.IgnoreAllServerChanges, &out.IgnoreAllServerChanges
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreChangesTo != nil {
		in, out := &in.IgnoreChangesTo, &out.IgnoreChangesTo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.QueryString != nil {
		in, out := &in.QueryString, &out.QueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadMethod != nil {
		in, out := &in.ReadMethod, &out.ReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReadPath != nil {
		in, out := &in.ReadPath, &out.ReadPath
		*out = new(string)
		**out = **in
	}
	if in.ReadQueryString != nil {
		in, out := &in.ReadQueryString, &out.ReadQueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadSearch != nil {
		in, out := &in.ReadSearch, &out.ReadSearch
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdateData != nil {
		in, out := &in.UpdateData, &out.UpdateData
		*out = new(string)
		**out = **in
	}
	if in.UpdateMethod != nil {
		in, out := &in.UpdateMethod, &out.UpdateMethod
		*out = new(string)
		**out = **in
	}
	if in.UpdatePath != nil {
		in, out := &in.UpdatePath, &out.UpdatePath
		*out = new(string)
		**out = **in
	}
	if in.UpdateQueryString != nil {
		in, out := &in.UpdateQueryString, &out.UpdateQueryString
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectObservation.
func (in *ObjectObservation) DeepCopy() *ObjectObservation {
	if in == nil {
		return nil
	}
	out := new(ObjectObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectParameters) DeepCopyInto(out *ObjectParameters) {
	*out = *in
	if in.CreateMethod != nil {
		in, out := &in.CreateMethod, &out.CreateMethod
		*out = new(string)
		**out = **in
	}
	if in.CreatePath != nil {
		in, out := &in.CreatePath, &out.CreatePath
		*out = new(string)
		**out = **in
	}
	if in.CreateQueryString != nil {
		in, out := &in.CreateQueryString, &out.CreateQueryString
		*out = new(string)
		**out = **in
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = new(string)
		**out = **in
	}
	if in.Debug != nil {
		in, out := &in.Debug, &out.Debug
		*out = new(bool)
		**out = **in
	}
	if in.DeleteQueryString != nil {
		in, out := &in.DeleteQueryString, &out.DeleteQueryString
		*out = new(string)
		**out = **in
	}
	if in.DestroyData != nil {
		in, out := &in.DestroyData, &out.DestroyData
		*out = new(string)
		**out = **in
	}
	if in.DestroyMethod != nil {
		in, out := &in.DestroyMethod, &out.DestroyMethod
		*out = new(string)
		**out = **in
	}
	if in.DestroyPath != nil {
		in, out := &in.DestroyPath, &out.DestroyPath
		*out = new(string)
		**out = **in
	}
	if in.DriftFields != nil {
		in, out := &in.DriftFields, &out.DriftFields
		*out = new(string)
		**out = **in
	}
	if in.DriftFieldsFromData != nil {
		in, out := &in.DriftFieldsFromData, &out.DriftFieldsFromData
		*out = new(bool)
		**out = **in
	}
	if in.ForceNew != nil {
		in, out := &in.ForceNew, &out.ForceNew
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IDAttribute != nil {
		in, out := &in.IDAttribute, &out.IDAttribute
		*out = new(string)
		**out = **in
	}
	if in.IgnoreAllServerChanges != nil {
		in, out := &in.IgnoreAllServerChanges, &out.IgnoreAllServerChanges
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreChangesTo != nil {
		in, out := &in.IgnoreChangesTo, &out.IgnoreChangesTo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.QueryString != nil {
		in, out := &in.QueryString, &out.QueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadMethod != nil {
		in, out := &in.ReadMethod, &out.ReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReadPath != nil {
		in, out := &in.ReadPath, &out.ReadPath
		*out = new(string)
		**out = **in
	}
	if in.ReadQueryString != nil {
		in, out := &in.ReadQueryString, &out.ReadQueryString
		*out = new(string)
		**out = **in
	}
	if in.ReadSearch != nil {
		in, out := &in.ReadSearch, &out.ReadSearch
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdateData != nil {
		in, out := &in.UpdateData, &out.UpdateData
		*out = new(string)
		**out = **in
	}
	if in.UpdateMethod != nil {
		in, out := &in.UpdateMethod, &out.UpdateMethod
		*out = new(string)
		**out = **in
	}
	if in.UpdatePath != nil {
		in, out := &in.UpdatePath, &out.UpdatePath
		*out = new(string)
		**out = **in
	}
	if in.UpdateQueryString != nil {
		in, out := &in.UpdateQueryString, &out.UpdateQueryString
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectParameters.
func (in *ObjectParameters) DeepCopy() *ObjectParameters {
	if in == nil {
		return nil
	}
	out := new(ObjectParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectSpec) DeepCopyInto(out *ObjectSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectSpec.
func (in *ObjectSpec) DeepCopy() *ObjectSpec {
	if in == nil {
		return nil
	}
	out := new(ObjectSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectStatus) DeepCopyInto(out *ObjectStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectStatus.
func (in *ObjectStatus) DeepCopy() *ObjectStatus {
	if in == nil {
		return nil
	}
	out := new(ObjectStatus)
	in.DeepCopyInto(out)
	return out
}
